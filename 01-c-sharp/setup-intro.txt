tools:
    visual studio
        (only .net core workload required)
    visual studio code
    git for windows (+ git bash)
        installs linux-like bash environment (terminal)
        also installs git, for version control
    .net core sdk
        lets us compile c# code.
        included with visual studio workload
        gives us "dotnet" command
bash commands:
    ls
        see contents of current directory
    cd
        change directory
    mkdir
        make new directory
    (tab completion)
        auto-complete directory/file names
    (up/down arrow)
        bash history, see and re-run previous commands
git commands:
    git status
        see current status of current repository
    git pull
        get latest changes pushed by others
    git clone
        make new local copy of a repository from GitHub
        in a new subdirectory of the current directory.
        then, cd into it to begin running git commands in its context.
    git add
        give this command paths as arguments to stage those changes in the
        index, to be committed. give it "." to add every change under the
        current directory.
    git reset
        this commands can do several things, among them, unstage changes from
        the index.
    git commit
        this records all changes in the index as a permanent "commit" in the
        repo's history. use "-m" option to add a message in-line.
    git push
        this uploads commits on the current branch to the configured remote
        repo (often, GitHub).
    HEAD
        means current commit
    ^
        (caret) means parent of something.
dotnet commands:
    dotnet new
        generate a new .net project from a variety of templates, e.g. "console"
        run "dotnet new console" in a empty directory, or,
        run "dotnet new console -n name-of-project" to create that project
        directory in the same step.
    steps to build & run code:
    1. dotnet restore
        download/update all code dependencies
    2. dotnet build
        compile the code (to CIL in a DLL/EXE)
    3. dotnet run
        run the compiled code (in the DLL/EXE)
    dotnet sln add
        add a project to a solution
vs code settings for windows:
    "git.path": "C:\\Program Files\\Git\\bin\\git.exe",
    "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe",
nano shortcuts:
    Ctrl-O (+enter): save
    Ctrl+X: exit
