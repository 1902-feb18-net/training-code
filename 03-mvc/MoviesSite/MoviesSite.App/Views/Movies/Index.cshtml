@model IEnumerable<MoviesSite.App.ViewModels.MovieViewModel>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<h4>Current time: @ViewData["currentTime"]</h4>
<h4>Number of movies: @ViewBag.numOfMovies</h4>
<h5>Counter (with TempData:) @TempData["counter"]</h5>
<h5>@ViewBag.numFromActionMethod</h5>
@* .Peek above and below would keep the value indefinitely *@
@{ 
    if (((int)TempData["counter"]) <= 3)
    {
        TempData.Keep("counter");
    }
}

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReleaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Genre)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                @* Razor views have "tag helpers" (like <a asp-for...>, <form asp-action...>) *@
                @* they also have "HTML helpers" that do the same things, but they look like C# *@
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ReleaseDate)
                </td>
                <td>
                    @(item.Genre?.Name ?? "(none)")
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
    </tbody>
</table>
